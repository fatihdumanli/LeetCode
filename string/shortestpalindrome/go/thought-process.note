// The limitation of the problem is that we can only append characters in
// the beginning.

// if the question was to finding a palindrome rather than shortest one 
// Input: abcd
// all we need to do is to treat the most left character as the middle
// character

// and append all characters coming after it in reverse order
// such as
// [a]bcd
// b [a] bcd
// cb [a] bcd
// dcb [a] bcd
// Output: dcb[a]bcd

// It doesn't matter if the length is even or odd
// [a]bc
// cb[a]bc

// PALINDROME AT THE END
// fs[dfd]
// dfds f sdfd

// PALINDROME AT THE END
// abd[pap]
// papdbabdpap


// PALINDROME AT THE MIDDLE
// abc[ded]ad
// dadedcbabcdedad

// PALINDROME AT THE BEGINNING
// [aba]dd
// ignoring the palindrome at the beginning: ddababadd
// using it: ddabadd

// So, the only establishment we can benefit from are the setups where
// there's a palindrome that starts from the beginning of the string

// If there's such a pattern, we can take advantage of it and use the
// existing palindrome to build a shorter palindrome.

// So, we need to find the longest palindrome that spans into the beginning
// of the string. 

// [aa]b -> There's a palindrome that spans to the beginning
// [abcba]d -> There's a longer palindrome that spans to the beginning
// baaxaab

// When can we make sure that it's not possible to find a palindrome that spans
// to the beginning anymore? Obviously we don't need to check until the last
// character of the string.

// aabaa[dd]

// When i gets greater than the middle?


// If there's no palindrome that spans to the beginning of the string
// We're just going to pick up s[0] as the pivot and add all elements coming
// after it to the beginning in reverse order.

// A question, what happens if the palindrome also spans to the end of
// the array? Do we have to add any characters? Answer: NO. Return it as is.

// Input: "aabbaa"
// Output: aabbaa
